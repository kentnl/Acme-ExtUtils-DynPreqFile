# NAME

Acme::ExtUtils::DynPreqFile - Structured Dynamic Prerequisites and Metadata extraction.

# VERSION

version 0.001000

# SYNOPSIS

## In `Makefile.PL`

    my %WriteMakefileArgs = (
      ...
    );

    require Acme::ExtUtils::DynPreqFile;
    my $dynpreq = Acme::ExtUtils::DynPreqFile->new('dynpreqfile');

    ## Author Mode
    if ( ! -e 'META.json' ) {
      # Injects x_dynamic_prereqs
      $dynpreq->eumm_merge_metadata(\%WriteMakefileArgs);
    } else {
      my $config = $dynpreq->configure;
      # executes configure blocks
      # and merges prereqs into relevant EUMM Prereq stashes
      $config->eumm_merge_configure(\%WriteMakefileArgs);
    }

    WriteMakefileArgs(%WriteMakefileArgs);

## `dynpreqfile`

    use lib 'inc'; # Load helpers for implementing conditions
    use ExtUtils::DynPrereqs::Utils qw( has_compiler );

    # Label to use in META.* and diagnostics
    providing "Win32 Extensions" => sub {

      # Description of condition for META.* for Vendors
      condition "OS is Windows and has a C Compiler" => sub {
        # Implementation of condition for ->configure call
        $^O eq q[Win32] and has_compiler();
      };

      # Prereq augmentation when condition is true
      # used in published META.* and used in MYMETA.*
      # under satisfactory ->configure
      requires "Some::Module";

      # NOTE: on configure is banned because it must be satisfied
      #       before calling Makefile.PL anyway, making configure-time
      #       configure requirements a stupid time machine.

      on "test" => sub {
        requires "Some::Test::Requrirement" => 0;
      };
      on "build" => sub {
        requires "Some::Build" => 0;
      };

    };

# DESCRIPTION

This is a prototype example of the idea I floated on [CPAN::Meta::Spec issue](https://github.com/Perl-Toolchain-Gang/CPAN-Meta/issues/112#issuecomment-229314326)
regarding the need for vendor-friendly metadata in `META.json`.

This approach makes solving that without reams of redundancy mostly straight-forward,
creating a simple language that Perl can use to both

- Generate static metadata for exposing to vendors
- Provide executable code that performs what the static metadata describes

The ideas here-in are stolen from `CPANFile` and `Dist::Zilla::Plugin::DynamicPrereqs`

The `dynpreqfile` stated in synopsis would result in the following content in `META.json`
( Taking careful note there is **NO** executable logic in it )

    "x_dynamic_prereqs" : {
      "Win32 Extensions" : {
        "condition": "OS is Windows and has a C Compiler",
        "prereqs": {
          "build": {
            "requires": {
              "Some::Module": 0
            }
          },
          "runtime": {
            "requires": {
              "Some::Module": 0
            }
          },
          "test": {
            "requires": {
              "Some::Test::Requirement": 0
            }
          }
        }
      }
    }

After calling `$instance->configure->eumm_merge_config( \%WriteMakefileArgs )`
during install-time configure, assuming the code block containing `$^O` returned true,
`x_dynamic_prereqs.Win32 Extensions.prereqs` would be merged into `preqreqs`

# METHODS

## new

    # Path to file mandatory, because this is a prototype, the name is not
    # decided on, and may conflict with other future naming choices as this is
    # nowhere near concrete.
    #
    # Lack of a default is easier to solve backwards compatibily than a bad default.
    my $instance = Acme::ExtUtils::DynPreqFile->new( 'dynpreqfile' );

This creates an instance, and sets up the glue to lazily load and decode a `dynpreqfile`

## eumm\_merge\_metadata

Merge loaded static data into `CPAN::Meta` structures
suitable for generating `META.json` via `ExtUtils::MakeMaker`.

Presently injects into `x_dynamic_prereqs`

    $instance->eumm_merge_metadata( \%WriteMakefileArgs );

This method should be called only in "author" mode, which can be
implemented carefully by ensuring `META.json` is not in your source
tree repository, and by defining the absence of that file as "Author" mode,
assuming that the relevant file will be generated during the standard
`perl Makefile.PL && make manifest && make dist` invocation.

    if ( ! -e 'META.json' ) {
      # Injects x_dynamic_prereqs
      $dynpreq->eumm_merge_metadata(\%WriteMakefileArgs);
    }

## configure

Execute the codified conditional logic in the active parts of `dynpreqfile`
and return an object representing the "configured" result.

    my $result = $instance->configure();

The result object can then be queried ( See: [Acme::ExtUtils::DynPreqFile::Result](https://metacpan.org/pod/Acme::ExtUtils::DynPreqFile::Result) )
but it can be used to automatically update `WriteMakefileArgs` to communicate
the decided post-configure prerequisites.

    $instance->configure()->eumm_merge_config(\%WriteMakefileArgs);

# `DynPreqFile` Specification

`DynPreqFile`'s syntax is heavily borrowed from [cpanfile](https://metacpan.org/pod/cpanfile)'s syntax.

It however has notable distinctions:

- **Conditional** _Configuration_ Feature Groups
- Static Human descriptions of conditions
- Executable code blocks that return true/false for feature group inclusion

.

    providing $name => sub {
      condition $description => \&boolean_test;

      requires $module_name  => $version;
      on $phase => sub {
        requires $module_name  => $version;
      };
    };

## `providing`

Define a feature group for conditional inclusion ( Note this is **DIFFERENT**
to `cpanfile`'s `feature` with special note of [`condition`](#condition)).

    providing $name, \&coderef

`&coderef` will be called and all method calls inside it will
define a specification for a group named `$name`

Valid only at global scope.

## `condition`

    condition $desc => \&test_code

Define a 2-part condition as a property of the current feature group ( `providing` )

`$desc` is used in exported metadata for humans to read, and it should describe in
a system agnostic way what condition the `&test_code` is testing for in human terms.

`&test_code` is attached to the feature group and is used during `configure` to determine
which features to include.

This is valid only inside a `providing` section.

## `requires`, `recommends`, `suggests`, `conflicts`

These are the same as per [`cpanfile`](https://metacpan.org/pod/cpanfile#SYNTAX)'s definition of the same.

All are valid inside a `providing` section and inside an `on` section, but **not**
inside `condition`'s `&test_code`.

## `on`

These are the same as per [`cpanfile`](https://metacpan.org/pod/cpanfile#SYNTAX)'s definition of the same,
**EXCEPT** for phase `configure`, which is **Banned**:

All configure requirements must be satisfied _Before_ using `DynPreqFile`
because there is no "second configure phase" after `Makefile.PL` is run, so
stipulating extra configure requirements inside configure just cannot work.

All are valid inside a `providing` section and inside an `on` section, but **not**
inside `condition`'s `&test_code`.

## `feature`, `*_requires`

These features are **NOT** available as `feature` and `providing` are presently
considered to have no usable feature overlaps.

( And you can probably implement `feature` with `providing` in some regards )

# AUTHOR

Kent Fredric <kentnl@cpan.org>

# COPYRIGHT AND LICENSE

This software is copyright (c) 2016 by Kent Fredric <kentfredric@gmail.com>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
